  В данной программе реализована логика маршрутизации, а именно, сопоставление запросов с конкретными методами, на которые указывает запрос.
  
  Работа алгоритма основана на 3 основных компонентах:
  1) Класс PostController;
  2) Модуль Resource;
  3) Класс Router.

  Программа "имитирует" работу веб-приложения, на котором пользователи могут работать с такими объектами, как посты и комментарии к ним. Их можно просматривать как общим списком, так и конкретный пост отдельно с его комментариями. Пост можно создать, просмотреть, изменить и удалить. К каждому посту можно написать комментарий.
  
  Рассмотрим поподробнее роль каждого компонента.
  
  1) Класс PostController. В нем описаны основные методы для работы с постами. При создании объекта этого класса создаётся переменная экземпляра, которая будет содержать в себе посты. Она используется в методах этого класса. Например, в index будет использовать весь список постов, содержащихся в @posts; в show будет использован конкретный пост с индексом id, который будет передаваться с запросом; при выполнении метода create будет создан новый запрос, который записывается в переменную экземпляра @posts и так далее.
  
  2) Модуль Resource. В данном блоке описывается способ обращения к ресурсам, исходя из запросов. В его единственном методе рассматривается аргумент метода routes, который используется для вызова введённых пользователем действий с постами с помощью примесей.
  Данный модуль передаётся в класс PostController с помощью ключевого слова extend, что позволяет выполнять методы этого класса при наличии в модуле экземпляра класса.
  Данный способ ассоциации позволяет разделить функционал и логику работы приложения, убрав возможность компонентов влиять друг на друга, а также разделяет каждый компонент на отдельные роли, выполняющие соответствующие им методы. Таким образом, уменьшается загруженность структур (классов) и улучшается читаемость кода.
  
  3) Класс Router. В нём описаны механизм создания запросов и внутренняя структура ресурсов. При создании объекта этого класса, он инициирует переменную экземпляра @routes, которая используется для хранения всех ключевых слов, выполняющие некоторые функции при обращении к ним.
  Здесь описаны основные ключевые слова ресурсной маршрутизации: GET, PUT, POST, DELETE. При этом у GET есть ветвление использования для index и show при запросе вывода списка постов или конкретной записи соответственно.  
  Метод init, который запускается при запуске скрипта, даёт пользователю выбор взаимодействия с ресурсами: либо с постами, либо с комментариями.  
  
  Для выхода из всех методов при запросе у пользователя ввода информации используется символ 'q'.
